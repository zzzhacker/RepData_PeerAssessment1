install.packages("curl")
install.packages("curl")
library("curl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages('markovchain')
1=2
1==2
1==1
3+2
3/2
search()
library('CaTools')
library(CaTools)
library(csv)
library(data.table)
library('data.table')
clr
clear
1/2
1==2
3==3
9+2
1000*3
search()
qnorm(70,80,10)
qnorm(70,mean=80,sd=10)
pnorm(70,mean=80,sd=10)
qnorm(.95,mean=1100,sd=75)
qnorm(.95,mean=1100,sd=7.5)
.5^6
.5^6*2
pbinom(3, 5, .5)
.5^5
5c3
ppois(14,15)
ppois(10,15)
setwd("~/datascience/JHUworkplace/reproducible research/week2/RepData_PeerAssessment1")
df=read.csv('activity.csv')
str(df)
mdf=aggregate(steps~date,sum,data=df,na.action = na.omit)
head(mdf)
mean(mdf$steps)
median(mdf$steps)
library(ggplot2)
qplot(mdf$steps,binwidth=500,xlab='Total steps per day',ylab='Frequency')
imdf<-aggregate(steps~interval,mean,data=df,na.rm=TRUE)
ggplot(data=imdf, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")
imdf[which.max(imdf$steps),1]
length(which(is.na(df$steps)))
df[is.na(df$steps)==TRUE,]$steps = imdf$steps[match(imdf$interval,df$interval)]
imdfi<-aggregate(steps~interval,mean,data=df,na.rm=TRUE)
ggplot(data=imdf, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")
mdfi=aggregate(steps~date,sum,data=df)
mean(mdfi$steps)
median(mdfi$steps)
qplot(mdf$steps,binwidth=500,xlab='Total steps per day',ylab='Frequency')
#df$dateType <-  ifelse(as.POSIXlt(df$date)$wday %in% c(0,6), 'weekend', 'weekday')
imdfi<-aggregate(steps~interval+dateType,mean,data=df,na.rm=TRUE)
View(imdfi)
df$dateType <-  ifelse(as.POSIXlt(df$date)$wday %in% c(0,6), 'weekend', 'weekday')
imdfi<-aggregate(steps~interval+dateType,mean,data=df,na.rm=TRUE)
#ggplot(data=imdfi, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")+facet_grid(~.dateType)
View(imdfi)
View(imdf)
View(imdf)
View(imdfi)
imdfi<-aggregate(steps~interval,mean,data=df,na.rm=TRUE)
ggplot(data=imdf, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")
View(imdfi)
df$dateType <-  ifelse(as.POSIXlt(df$date)$wday %in% c(0,6), 'weekend', 'weekday')
imdfi<-aggregate(steps~interval+dateType,mean,data=df,na.rm=TRUE)
#ggplot(data=imdfi, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")+facet_grid(~.dateType)
View(imdfi)
df$dateType <-  ifelse(as.POSIXlt(df$date)$wday %in% c(0,6), 'weekend', 'weekday')
imdfi<-aggregate(steps~interval+dateType,mean,data=df,na.rm=TRUE)
ggplot(data=imdfi, aes(x=interval, y=steps,color=dateType)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")+facet_wrap(~dateType, ncol = 1, nrow=2)
library(ggplot2)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
mdf=aggregate(steps~date,sum,data=df,na.action = na.omit)
qplot(mdf$steps,binwidth=500,xlab='Total steps per day',ylab='Frequency')
stepsByDayMean <- mean(mdf$steps)
stepsByDayMedian <- median(mdf$steps)
imdf<-aggregate(steps~interval,mean,data=df,na.rm=TRUE)
ggplot(data=imdf, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")
imdf[which.max(imdf$steps),1]
numMissingValues <- length(which(is.na(df$steps)))
df[is.na(df$steps)==TRUE,]$steps = imdf$steps[match(imdf$interval,df$interval)]
library(ggplot2)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
mdf=aggregate(steps~date,sum,data=df,na.action = na.omit)
qplot(mdf$steps,binwidth=500,xlab='Total steps per day',ylab='Frequency')
stepsByDayMean <- mean(mdf$steps)
stepsByDayMedian <- median(mdf$steps)
imdf<-aggregate(steps~interval,mean,data=df,na.rm=TRUE)
ggplot(data=imdf, aes(x=interval, y=steps)) +
geom_line(color='orange') +
xlab("5-minute interval") +
ylab("average number of steps taken")
imdf[which.max(imdf$steps),1]
numMissingValues <- length(which(is.na(df$steps)))
View(df)
